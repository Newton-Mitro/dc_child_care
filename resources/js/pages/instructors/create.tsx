import ClassicEditor from '@ckeditor/ckeditor5-build-classic';
import { CKEditor } from '@ckeditor/ckeditor5-react';
import { Transition } from '@headlessui/react';
import { Head, router } from '@inertiajs/react';
import React, { useState } from 'react';
import HeadingSmall from '../../components/heading-small';
import InputError from '../../components/input-error';
import { MediaSelector } from '../../components/media-selector';
import { Button } from '../../components/ui/button';
import { Input } from '../../components/ui/input';
import { Label } from '../../components/ui/label';
import AppLayout from '../../layouts/app-layout';
import { BreadcrumbItem } from '../../types';
import { Media } from '../../types/media';
import { PaginatedData } from '../../types/paginated_meta';
import MediaBrowserModal from '../media/media_browser_modal';

export interface InstructorForm {
    media_id?: number | null;
    instructor_id: string;
    name: string;
    bio?: string | null;
    email: string;
    phone?: string | null;
    date_of_birth?: string | null;
    gender?: 'MALE' | 'FEMALE' | 'OTHER' | null;
    designation?: string | null;
    department?: string | null;
    national_id_no?: string | null;
    religion?: 'ISLAM' | 'HINDUISM' | 'CHRISTIANITY' | 'BUDDHISM' | 'OTHER' | null;
    address?: string | null;
    status: 'Active' | 'Inactive';
}

interface CreateProps {
    media: PaginatedData<Media>;
}

export default function Create({ media }: CreateProps) {
    const [form, setForm] = useState<InstructorForm>({
        media_id: null,
        instructor_id: '', // can be generated by backend
        name: '',
        bio: '',
        email: '',
        phone: '',
        date_of_birth: '',
        gender: null,
        designation: '',
        department: '',
        national_id_no: '',
        religion: null,
        address: '',
        status: 'Active',
    });

    const [selectedMedia, setSelectedMedia] = useState<Media | null>(null);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [errors, setErrors] = useState<Record<string, any>>({});
    const [recentlySuccessful, setRecentlySuccessful] = useState(false);

    const submit = (e: React.FormEvent) => {
        e.preventDefault();
        router.post(route('instructors.store'), form, {
            onError: (err) => setErrors(err),
            onSuccess: () => setRecentlySuccessful(true),
        });
    };

    const breadcrumbs: BreadcrumbItem[] = [
        { title: 'Dashboard', href: '/dashboard' },
        { title: 'Instructors', href: route('instructors.index') },
        { title: `Create Instructor`, href: '' },
    ];

    return (
        <AppLayout breadcrumbs={breadcrumbs}>
            <Head title="Create Instructor" />
            <div className="h-[calc(100vh-100px)] space-y-8 overflow-auto p-6">
                <HeadingSmall title="Create Instructor" description="Add a new instructor" />

                <form onSubmit={submit} className="space-y-6 rounded-lg border bg-white p-6 md:w-4xl dark:bg-gray-900">
                    {/* Department + Contact Info */}
                    <div className="grid gap-4 md:grid-cols-2">
                        <div className="flex flex-col gap-2">
                            <Label>Instructor ID</Label>
                            <Input value={form.instructor_id} onChange={(e) => setForm({ ...form, instructor_id: e.target.value })} />
                            <InputError message={errors.instructor_id} />
                        </div>
                        <div className="flex flex-col gap-2">
                            <Label>Name</Label>
                            <Input value={form.name} onChange={(e) => setForm({ ...form, name: e.target.value })} />
                            <InputError message={errors.name} />
                        </div>

                        <div className="flex flex-col gap-2">
                            <Label>Designation</Label>
                            <Input value={form.designation || ''} onChange={(e) => setForm({ ...form, designation: e.target.value })} />
                            <InputError message={errors.designation} />
                        </div>
                        <div className="flex flex-col gap-2">
                            <Label>Department</Label>
                            <Input value={form.department || ''} onChange={(e) => setForm({ ...form, department: e.target.value })} />
                            <InputError message={errors.department} />
                        </div>

                        <div className="flex flex-col gap-2">
                            <Label>Email</Label>
                            <Input value={form.email} onChange={(e) => setForm({ ...form, email: e.target.value })} />
                            <InputError message={errors.email} />
                        </div>

                        <div className="flex flex-col gap-2">
                            <Label>Phone</Label>
                            <Input value={form.phone || ''} onChange={(e) => setForm({ ...form, phone: e.target.value })} />
                            <InputError message={errors.phone} />
                        </div>

                        <div className="flex flex-col gap-2">
                            <Label>Date of Birth</Label>
                            <Input
                                type="date"
                                value={form.date_of_birth || ''}
                                onChange={(e) => setForm({ ...form, date_of_birth: e.target.value })}
                            />
                            <InputError message={errors.date_of_birth} />
                        </div>

                        <div className="flex flex-col gap-2">
                            <Label>Gender</Label>
                            <select
                                value={form.gender || ''}
                                onChange={(e) => setForm({ ...form, gender: e.target.value as any })}
                                className="rounded border px-3 py-2"
                            >
                                <option value="">Select Gender</option>
                                <option value="MALE">Male</option>
                                <option value="FEMALE">Female</option>
                                <option value="OTHER">Other</option>
                            </select>
                            <InputError message={errors.gender} />
                        </div>

                        <div className="flex flex-col gap-2">
                            <Label>Religion</Label>
                            <select
                                value={form.religion || ''}
                                onChange={(e) => setForm({ ...form, religion: e.target.value as any })}
                                className="rounded border px-3 py-2"
                            >
                                <option value="">Select Religion</option>
                                <option value="ISLAM">Islam</option>
                                <option value="HINDUISM">Hinduism</option>
                                <option value="CHRISTIANITY">Christianity</option>
                                <option value="BUDDHISM">Buddhism</option>
                                <option value="OTHER">Other</option>
                            </select>
                            <InputError message={errors.religion} />
                        </div>

                        <div className="flex flex-col gap-2">
                            <Label>Address</Label>
                            <Input value={form.address || ''} onChange={(e) => setForm({ ...form, address: e.target.value })} />
                            <InputError message={errors.address} />
                        </div>
                    </div>

                    {/* Bio + Message */}
                    <div className="flex flex-col gap-2">
                        <Label>Bio</Label>
                        <CKEditor
                            editor={ClassicEditor as any}
                            data={form.bio || ''}
                            onChange={(_, editor) => setForm({ ...form, bio: editor.getData() })}
                        />
                        <InputError message={errors.bio} />
                    </div>

                    {/* Media */}
                    <div className="flex flex-col gap-2">
                        <MediaSelector
                            media={selectedMedia}
                            onSelect={() => setIsModalOpen(true)}
                            onRemove={() => {
                                setSelectedMedia(null);
                                setForm({ ...form, media_id: null });
                            }}
                            error={errors.media_id}
                        />
                    </div>

                    {/* Actions */}
                    <div className="flex items-center gap-4">
                        <Button type="submit">Create</Button>
                        <Transition
                            show={recentlySuccessful}
                            enter="transition ease-in-out"
                            enterFrom="opacity-0"
                            leave="transition ease-in-out"
                            leaveTo="opacity-0"
                        >
                            <p className="text-sm text-neutral-600">Created</p>
                        </Transition>
                    </div>
                </form>

                {/* Media Modal */}
                <MediaBrowserModal
                    isOpen={isModalOpen}
                    onClose={() => setIsModalOpen(false)}
                    media={media}
                    onSelect={(m) => {
                        setSelectedMedia(m);
                        setForm({ ...form, media_id: m.id });
                    }}
                />
            </div>
        </AppLayout>
    );
}
